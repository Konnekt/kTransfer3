### Generated by Winemaker


SRCDIR                = .
DLLS                  =
EXES                  = source.exe



### Common settings

CEXTRA                = -mno-cygwin
CXXEXTRA              = 
RCEXTRA               =
INCLUDE_PATH          = -I../include
DLL_PATH              =
LIBRARY_PATH          =
LIBRARIES             =

BOOSTSRC              = boost/signals

### source.exe sources and settings

source_exe_MODULE     = source.exe
source_exe_C_SRCS     =
source_exe_CXX_SRCS   = Application.cpp \
			BasicTypes.cpp \
			Bitmap.cpp \
			CanvasClasses.cpp \
			CommandLine.cpp \
			DestructionClass.cpp \
			Font.cpp \
			Icon.cpp \
			ImageList.cpp \
			LibraryLoader.cpp \
			Message.cpp \
			Widget.cpp \
			WidgetSplitter.cpp \
			$(BOOSTSRC)/connection.cpp \
			$(BOOSTSRC)/named_slot_map.cpp \
			$(BOOSTSRC)/signal_base.cpp \
			$(BOOSTSRC)/slot.cpp \
			$(BOOSTSRC)/trackable.cpp 
			
source_exe_RC_SRCS    =
source_exe_LDFLAGS    = -mwindows \
			-mno-cygwin
source_exe_DLL_PATH   =
source_exe_DLLS       = odbc32 \
			ole32 \
			oleaut32 \
			winspool
source_exe_LIBRARY_PATH=
source_exe_LIBRARIES  = uuid

source_exe_OBJS       = $(source_exe_C_SRCS:.c=.o) \
			$(source_exe_CXX_SRCS:.cpp=.o) \
			$(source_exe_RC_SRCS:.rc=.res)



### Global source lists

C_SRCS                = $(source_exe_C_SRCS)
CXX_SRCS              = $(source_exe_CXX_SRCS)
RC_SRCS               = $(source_exe_RC_SRCS)


### Tools

CC = winegcc
CXX = wineg++
RC = wrc


### Generic targets

../lib/libsmartwin.a: $(source_exe_OBJS) ../lib
	ar -ru "libsmartwin.a" $(source_exe_OBJS)
	mv libsmartwin.a ../lib

../lib:
	mkdir ../lib


all: $(DLLS:%=%.so) $(EXES:%=%.so)

### Build rules

.PHONY: all clean dummy

$(SUBDIRS): dummy
	@cd $@ && $(MAKE)

# Implicit rules

.SUFFIXES: .cpp .rc .res
DEFINCL = $(INCLUDE_PATH) $(DEFINES) $(OPTIONS)
CXXFLAGS = -Os

.c.o:
	$(CC) -c $(CFLAGS) $(CEXTRA) $(DEFINCL) -o $@ $<

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

.rc.res:
	$(RC) $(RCFLAGS) $(RCEXTRA) $(DEFINCL) -fo$@ $<

# Rules for cleaning

CLEAN_FILES     = y.tab.c y.tab.h lex.yy.c core *.orig *.rej \
                  \\\#*\\\# *~ *% .\\\#*

clean:: $(SUBDIRS:%=%/__clean__) $(EXTRASUBDIRS:%=%/__clean__)
	$(RM) $(CLEAN_FILES) $(RC_SRCS:.rc=.res) $(C_SRCS:.c=.o) $(CXX_SRCS:.cpp=.o)
	$(RM) $(DLLS:%=%.so) $(EXES:%=%.so) $(EXES:%.exe=%)

$(SUBDIRS:%=%/__clean__): dummy
	cd `dirname $@` && $(MAKE) clean

$(EXTRASUBDIRS:%=%/__clean__): dummy
	-cd `dirname $@` && $(RM) $(CLEAN_FILES)

### Target specific build rules
DEFLIB = $(LIBRARY_PATH) $(LIBRARIES) $(DLL_PATH)

$(source_exe_MODULE).so: $(source_exe_OBJS)
	$(CXX) $(source_exe_LDFLAGS) -o $@ $(source_exe_OBJS) $(source_exe_LIBRARY_PATH) $(DEFLIB) $(source_exe_DLLS:%=-l%) $(source_exe_LIBRARIES:%=-l%)


